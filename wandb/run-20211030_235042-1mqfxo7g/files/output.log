
CUDA availability: True
  0%|                                                                                                                                                       | 0/496 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "main.py", line 126, in <module>
    main()
  File "main.py", line 122, in main
    model_trained = train(dataset, config,  device)
  File "main.py", line 81, in train
    loss, timing_loss, choice_l = model(arr_b.float(), arr_c.float(), arr_delta_time.float(), event_data, non_event_data, estimate_length, choice_data_dict)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/Projects/MA_packed/model.py", line 183, in forward
    event_lambdas = self.timing_net(mat_b, mat_c, event_data) # (L3, )
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/Projects/MA_packed/model.py", line 269, in forward
    lambda_dt = self.exponential_decay(rate)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/container.py", line 119, in forward
    input = module(input)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 94, in forward
    return F.linear(input, self.weight, self.bias)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/functional.py", line 1753, in linear
    return torch._C._nn.linear(input, weight, bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x13 and 1x6)
#### arr_b tensor([[[ 1.6461,  0.2316, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 1.8767,  0.3045, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 2.2556,  0.3868, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 2.6150,  0.4672, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 2.8471,  0.5928, -0.2817, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 3.2704,  0.5755, -0.2752, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 3.8558,  0.6120, -0.2765, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 4.3829,  0.6332, -0.2491, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 3.3003,  0.5038, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 3.3003,  0.5038, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 3.3003,  0.5038, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 5.4617,  0.8968, -0.2266, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 3.3003,  0.5038, -0.0715, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415],
         [ 5.3630,  0.7951,  0.1857, -0.3415, -0.3415, -0.3415, -0.3415,
          -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415, -0.3415]]]) torch.Size([1, 14, 14])
#### mat_b tensor([[[-0.1511,  0.0039, -0.1768,  0.0078,  0.1137, -0.1591,  0.1905,
           0.1011, -0.1726, -0.1205,  0.0450,  0.2220,  0.0906, -0.1957,
          -0.2575, -0.3090,  0.2688,  0.0353, -0.0812, -0.0866,  0.0724,
          -0.2224,  0.1311,  0.1875,  0.2257, -0.1023, -0.0145, -0.0021,
          -0.0526,  0.0910,  0.0911,  0.0982],
         [-0.1576, -0.0087, -0.1971,  0.0118,  0.1279, -0.1666,  0.2063,
           0.0949, -0.1696, -0.1386,  0.0475,  0.2267,  0.1076, -0.2017,
          -0.2802, -0.3349,  0.2880,  0.0568, -0.0671, -0.0735,  0.0719,
          -0.2258,  0.1374,  0.1817,  0.2313, -0.0999, -0.0371,  0.0054,
          -0.0774,  0.1073,  0.0975,  0.0954],
         [-0.1695, -0.0260, -0.2306,  0.0207,  0.1511, -0.1795,  0.2369,
           0.0920, -0.1634, -0.1677,  0.0489,  0.2265,  0.1410, -0.2195,
          -0.3116, -0.3825,  0.3241,  0.0865, -0.0462, -0.0459,  0.0760,
          -0.2346,  0.1425,  0.1698,  0.2463, -0.1002, -0.0654,  0.0157,
          -0.1157,  0.1374,  0.1066,  0.0877],
         [-0.1797, -0.0408, -0.2605,  0.0288,  0.1723, -0.1926,  0.2668,
           0.0911, -0.1566, -0.1931,  0.0513,  0.2254,  0.1721, -0.2370,
          -0.3400, -0.4291,  0.3600,  0.1131, -0.0245, -0.0197,  0.0774,
          -0.2436,  0.1476,  0.1577,  0.2612, -0.1012, -0.0909,  0.0232,
          -0.1507,  0.1655,  0.1142,  0.0794],
         [-0.1631, -0.0491, -0.2752,  0.0443,  0.1946, -0.2142,  0.2744,
           0.0985, -0.1566, -0.2008,  0.0594,  0.2499,  0.1576, -0.2495,
          -0.3664, -0.4520,  0.3795,  0.1492, -0.0127, -0.0269,  0.0451,
          -0.2262,  0.1485,  0.1393,  0.2511, -0.0926, -0.1145,  0.0198,
          -0.1691,  0.1839,  0.1058,  0.0628],
         [-0.1745, -0.0710, -0.3149,  0.0578,  0.2206, -0.2338,  0.3136,
           0.0949, -0.1447, -0.2373,  0.0502,  0.2407,  0.2035, -0.2862,
          -0.3916, -0.5218,  0.4127,  0.1834,  0.0065,  0.0114,  0.0675,
          -0.2350,  0.1488,  0.1262,  0.2722, -0.0948, -0.1365,  0.0363,
          -0.2085,  0.2206,  0.1189,  0.0442],
         [-0.1896, -0.0992, -0.3704,  0.0727,  0.2582, -0.2583,  0.3686,
           0.0933, -0.1319, -0.2851,  0.0469,  0.2351,  0.2614, -0.3282,
          -0.4314, -0.6104,  0.4607,  0.2306,  0.0407,  0.0624,  0.0833,
          -0.2444,  0.1513,  0.1059,  0.2989, -0.0997, -0.1705,  0.0551,
          -0.2635,  0.2682,  0.1319,  0.0201],
         [-0.2040, -0.1242, -0.4229,  0.0869,  0.2945, -0.2753,  0.4198,
           0.0882, -0.1233, -0.3290,  0.0515,  0.2229,  0.3190, -0.3639,
          -0.4689, -0.6813,  0.5045,  0.2735,  0.0691,  0.1102,  0.1041,
          -0.2590,  0.1577,  0.0899,  0.3241, -0.1087, -0.2024,  0.0796,
          -0.3057,  0.3121,  0.1401,  0.0020],
         [-0.1974, -0.0739, -0.3245,  0.0464,  0.2159, -0.2211,  0.3303,
           0.0881, -0.1409, -0.2501,  0.0458,  0.2182,  0.2412, -0.2878,
          -0.3864, -0.5347,  0.4161,  0.1677,  0.0131,  0.0398,  0.0985,
          -0.2563,  0.1503,  0.1347,  0.2939, -0.1061, -0.1297,  0.0442,
          -0.2151,  0.2210,  0.1303,  0.0515],
         [-0.1974, -0.0739, -0.3245,  0.0464,  0.2159, -0.2211,  0.3303,
           0.0881, -0.1409, -0.2501,  0.0458,  0.2182,  0.2412, -0.2878,
          -0.3864, -0.5347,  0.4161,  0.1677,  0.0131,  0.0398,  0.0985,
          -0.2563,  0.1503,  0.1347,  0.2939, -0.1061, -0.1297,  0.0442,
          -0.2151,  0.2210,  0.1303,  0.0515],
         [-0.1974, -0.0739, -0.3245,  0.0464,  0.2159, -0.2211,  0.3303,
           0.0881, -0.1409, -0.2501,  0.0458,  0.2182,  0.2412, -0.2878,
          -0.3864, -0.5347,  0.4161,  0.1677,  0.0131,  0.0398,  0.0985,
          -0.2563,  0.1503,  0.1347,  0.2939, -0.1061, -0.1297,  0.0442,
          -0.2151,  0.2210,  0.1303,  0.0515],
         [-0.2367, -0.1561, -0.5143,  0.1043,  0.3739, -0.2957,  0.5175,
           0.0874, -0.1204, -0.4035,  0.0936,  0.2215,  0.4220, -0.4025,
          -0.5631, -0.7873,  0.6111,  0.3614,  0.1317,  0.1838,  0.1103,
          -0.2930,  0.1902,  0.0604,  0.3765, -0.1231, -0.2737,  0.1032,
          -0.4033,  0.3972,  0.1449, -0.0076],
         [-0.1974, -0.0739, -0.3245,  0.0464,  0.2159, -0.2211,  0.3303,
           0.0881, -0.1409, -0.2501,  0.0458,  0.2182,  0.2412, -0.2878,
          -0.3864, -0.5347,  0.4161,  0.1677,  0.0131,  0.0398,  0.0985,
          -0.2563,  0.1503,  0.1347,  0.2939, -0.1061, -0.1297,  0.0442,
          -0.2151,  0.2210,  0.1303,  0.0515],
         [-0.2662, -0.1426, -0.5142,  0.0768,  0.3659, -0.2713,  0.5456,
           0.0786, -0.1233, -0.4248,  0.0893,  0.1755,  0.4742, -0.3952,
          -0.5326, -0.7855,  0.6103,  0.3196,  0.1368,  0.2394,  0.1566,
          -0.3327,  0.1908,  0.0688,  0.4137, -0.1431, -0.2564,  0.1182,
          -0.4029,  0.3836,  0.1665,  0.0207]]], grad_fn=<AddBackward0>) torch.Size([1, 14, 32])
torch.Size([1, 13])