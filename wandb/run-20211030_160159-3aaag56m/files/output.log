CUDA availability: True
tensor([[1.1135, 1.1060, 0.3671, 2.6552]], grad_fn=<MulBackward0>)
tensor(0.1826, grad_fn=<SumBackward0>)
Epoch 0. Total Loss: 755292.1361. Timing MLE loss: 755289.9209. Choice BCE loss 2.2152
tensor([[1.3814e-04, 6.2128e-08, 1.2426e-07, 1.5814e-02]],
       grad_fn=<MulBackward0>)
tensor(-45.5291, grad_fn=<SumBackward0>)
Epoch 1. Total Loss: 50.2207. Timing MLE loss: 48.6758. Choice BCE loss 1.5450
tensor([[4.9702e-07, 0.0000e+00, 0.0000e+00, 0.0000e+00]],
       grad_fn=<MulBackward0>)
tensor(-inf, grad_fn=<SumBackward0>)
Epoch 2. Total Loss: inf. Timing MLE loss: inf. Choice BCE loss 0.7901
tensor([[nan, nan, nan, nan]], grad_fn=<MulBackward0>)
tensor(nan, grad_fn=<SumBackward0>)
Traceback (most recent call last):
  File "main.py", line 89, in <module>
    main()
  File "main.py", line 85, in main
    model_trained = train(dataset, config,  device)
  File "main.py", line 48, in train
    loss, timing_loss, choice_loss  = model(arr_b.float(), arr_c.float(), arr_delta_time.float(), event_data, non_event_data, estimate_length, choice_data_dict)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/Projects/MA_packed/model.py", line 194, in forward
    event_choice_loss = self.choice_net(mat_b, mat_c, choice_data_dict, self.s_year, self.e_year)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/Projects/MA_packed/model.py", line 346, in forward
    choice_l = self.loss(torch.sigmoid(logits_i), true_tar_idxs_i)  # inputs are both (N_i_2, N_i_1)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/modules/loss.py", line 613, in forward
    return F.binary_cross_entropy(input, target, weight=self.weight, reduction=self.reduction)
  File "/home/dalab5/miniconda3/envs/GNN/lib/python3.8/site-packages/torch/nn/functional.py", line 2759, in binary_cross_entropy
    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)
RuntimeError: all elements of input should be between 0 and 1